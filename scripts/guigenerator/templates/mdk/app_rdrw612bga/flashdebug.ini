
FUNC void FlashInit (void) {
    //Configure FLEXSPI PinMux
    _WDWORD(0x45001538, _RDWORD(0x45001538) | 0xF0000000);
    _WDWORD(0x4500153C, _RDWORD(0x4500153C) | 0x7);
    _WDWORD(0x40004020, _RDWORD(0x40004020) | 0x2);

    // Deinit TDDR
    _WDWORD(0x40003090, _RDWORD(0x40003090) | 0x0000000C);
    _WDWORD(0x40003088, _RDWORD(0x40003088) & 0xFFFFFFF7);
    _Sleep_(1);
    _WDWORD(0x40003090, _RDWORD(0x40003090) | 0x20000000);
    // Init TDDR
    _WDWORD(0x40003088, _RDWORD(0x40003088) | 0x00060000);
    _WDWORD(0x40003090, _RDWORD(0x40003090) & 0xDFFFFFFF);
    _WDWORD(0x40003088, _RDWORD(0x40003088) | 0x00000008);
    _Sleep_(1);
    _WDWORD(0x40003090, _RDWORD(0x40003090) & 0xFFFFFFF7);

    // Disable FlexSPI clock
    _WDWORD(0x40001010, _RDWORD(0x40001010) & 0xFFFEFFFF);

    // Set clock source to tddr_mci_flexspi_clk 400M / 3
    _WDWORD(0x40001620, 0x00000005);
    _WDWORD(0x40001624, 0x20000000);
    _WDWORD(0x40001624, 0x00000002);
    while(_RDWORD(0x40001624) & 0x80000000)
    {
    }

    // Enable FlexSPI clock
    _WDWORD(0x40001010, _RDWORD(0x40001010) | 0x00010000);

    // Reset FlexSPI0
    _WDWORD(0x40000010, _RDWORD(0x40000010) & ~0x00010000);

    // Disable cache
    _WDWORD(0x4003301C, 0); // POLSEL
    _WDWORD(0x40033800, 0); // CCR

    _WDWORD(0x40134000, 0xFFFF1002); // FLEXSPI0->MCR0
    _WDWORD(0x40134004, 0xFFFFFFFF); // FLEXSPI0->MCR0
    _WDWORD(0x40134008, 0x200041F7); // FLEXSPI0->MCR2
    _WDWORD(0x4013400C, 0x00000038); // FLEXSPI0->AHBCR
    _WDWORD(0x40134020, 0x800F0000); // FELXSPI0->AHBRXBUF0CR0
    _WDWORD(0x40134024, 0x800F0000); // FELXSPI0->AHBRXBUF0CR1
    _WDWORD(0x40134028, 0x800F0000); // FELXSPI0->AHBRXBUF0CR2
    _WDWORD(0x4013402C, 0x800F0000); // FELXSPI0->AHBRXBUF0CR3
    _WDWORD(0x40134030, 0x800F0000); // FELXSPI0->AHBRXBUF0CR4
    _WDWORD(0x40134034, 0x800F0000); // FELXSPI0->AHBRXBUF0CR5
    _WDWORD(0x40134038, 0x800F0000); // FELXSPI0->AHBRXBUF0CR6
    _WDWORD(0x4013403C, 0x80000080); // FELXSPI0->AHBRXBUF0CR7
    _WDWORD(0x40134060, 0x00010000); // FLEXSPI0->FLSHA1CR0
    _WDWORD(0x40134064, 0x0); // FELXSPI0->FLASHA2CR0
    _WDWORD(0x40134068, 0x0); // FELXSPI0->FLASHB1CR0
    _WDWORD(0x4013406C, 0x0); // FELXSPI0->FLASHB2CR0
    _WDWORD(0x40134070, 0x00020063); // FLEXSPI0->FLSHA1CR0
    _WDWORD(0x40134074, 0x00000063); // FLEXSPI0->FLSHA2CR0
    _WDWORD(0x40134078, 0x00000063); // FLEXSPI0->FLSHB1CR0
    _WDWORD(0x4013407C, 0x00000063); // FLEXSPI0->FLSHB2CR0
    _WDWORD(0x40134080, 0x900); // FELXSPI->FLASHA1CR2
    _WDWORD(0x40134084, 0x0);   // FELXSPI->FLASHA2CR2
    _WDWORD(0x40134088, 0x0);   // FELXSPI->FLASHB1CR2
    _WDWORD(0x4013408C, 0x0);   // FELXSPI->FLASHB2CR2
    _WDWORD(0x40134094, 0xC3);  // FELXSPI0->FLSHCR4
    _WDWORD(0x401340C0, 0x3700); // FELXSPI0->DLLCRA
    _WDWORD(0x401340C4, 0x100);  // FELXSPI0->DLLCRB
    _WDWORD(0x401340E0, 0x3); 
    _WDWORD(0x401340E4, 0x0); // FELXSPI0->STS1
    _WDWORD(0x401340E8, 0x1763); // FELXSPI0->STS2
    _WDWORD(0x40134000, _RDWORD(0x40134000) & ~2); // FLEXSPI0->MCR0
        
    // Config look up table
    _WDWORD(0x40134018, 0x5AF05AF0);
    _WDWORD(0x4013401C, 0x2);

    // Quad Read
    _WDWORD(0x40134200, 0x0A1804EB);
    _WDWORD(0x40134204, 0x26043206);
    _WDWORD(0x40134208, 0x00000000);
    _WDWORD(0x4013420C, 0x00000000);

    // Enable Quad Mode
    _WDWORD(0x40134210, 0x20040401);
    _WDWORD(0x40134214, 0x00000000);
    _WDWORD(0x40134218, 0x00000000);
    _WDWORD(0x4013421C, 0x00000000);

    // Write Enable
    _WDWORD(0x40134220, 0x00000406);
    _WDWORD(0x40134224, 0x00000000);
    _WDWORD(0x40134228, 0x00000000);
    _WDWORD(0x4013422C, 0x00000000);

    // Set AHB Write triggered Command to stop
    _WDWORD(0x40134290, 0x00000000);
    _WDWORD(0x40134018, 0x5AF05AF0);
    _WDWORD(0x4013401C, 0x1);
    
    _WDWORD(0x40134000, _RDWORD(0x40134000) | 0x1); // Software Reset
    while(_RDWORD(0x40134000) & 0x1)
    {
    }
    _Sleep_(1);

    // Enable Quad Mode
    // First Write Enable
    _WDWORD(0x40134080, _RDWORD(0x40134080) | 0x80000000);
    // Clear interrupts
    _WDWORD(0x40134014, 0x00000F3F);
    // Set Transfer address
    _WDWORD(0x401340A0, 0);
    // Set Sequence ID 2,Sequence Num 0 and Data size
    _WDWORD(0x401340A4, (2 << 16) | 0);
    // Clear fifo. Watermark is 8 bytes
    _WDWORD(0x401340BC, 1);
    // Start trensfer
    _WDWORD(0x401340B0, 1);
    _Sleep_(1);

    // Then enter quad mode
    _WDWORD(0x40134080, _RDWORD(0x40134080) | 0x80000000);
    // Clear interrupts
    _WDWORD(0x40134014, 0x00000F3F);
    // Set Transfer address
    _WDWORD(0x401340A0, 0);
    // Set Sequence ID 1,Sequence Num 0 and Data size
    _WDWORD(0x401340A4, (1 << 16) | 1);
    // Clear fifo. Watermark is 8 bytes
    _WDWORD(0x401340BC, 1);
    // Start trensfer
    _WDWORD(0x401340B0, 1);
    // Write 0x40 to TX FIFO
    _WDWORD(0x40134180, 0x40);
    _Sleep_(5);

    _WDWORD(0x40134000, _RDWORD(0x40134000) | 0x1); // Software Reset
    while(_RDWORD(0x40134000) & 0x1)
    {
    }
    _Sleep_(1);
}

FUNC void Setup (void) {
    //FlashInit();
    //SP = _RDWORD(0x08001000);          // Setup Stack Pointer
    //PC = _RDWORD(0x08001004);          // Setup Program Counter
    //_WDWORD(0xE000ED08, 0x08001000);   // Setup Vector Table Offset Register
}

FUNC void OnResetExec(void)
{
    Setup();
}

LOAD %L INCREMENTAL                  // Download

Setup();                             // Setup for Running
