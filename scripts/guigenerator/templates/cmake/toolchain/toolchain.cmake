# Copyright 2024 NXP
#
# SPDX-License-Identifier: BSD-3-Clause

# General
SET(CMAKE_SYSTEM_NAME Generic)

SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

# SET(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_CROSSCOMPILING TRUE)
# Avoids running the linker during try_compile()
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
# list(APPEND CMAKE_TRY_COMPILE_PLATFORM_VARIABLES CONFIG_TOOLCHAIN)

# Set CMake variables for skipping compiler identification
set(CMAKE_ASM_COMPILER_FORCED TRUE)
set(CMAKE_C_COMPILER_FORCED TRUE)
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_CXX_COMPILER_ID "${CMAKE_C_COMPILER_ID}")
set(CMAKE_CXX_COMPILER_ID_RUN "${CMAKE_C_COMPILER_ID_RUN}")
set(CMAKE_CXX_COMPILER_VERSION "${CMAKE_C_COMPILER_VERSION}")
set(CMAKE_CXX_COMPILER_FORCED "${CMAKE_C_COMPILER_FORCED}")
set(CMAKE_CXX_COMPILER_WORKS "${CMAKE_C_COMPILER_WORKS}")

# TOOLCHAIN EXTENSION
IF(WIN32)
    SET(TOOLCHAIN_EXT ".exe")
ELSE()
    SET(TOOLCHAIN_EXT "")
ENDIF()

# Toolchain
set(TOOLCHAIN_ARMGCC armgcc)
set(COMPILER_ARMGCC gcc)

set(TOOLCHAIN_IAR iar)
set(COMPILER_IAR iar)

set(TOOLCHAIN_MDK mdk)
# For MDK, the compiler could be armclang or armcc, the default is armclang
set(COMPILER_MDK_ARMCLANG armclang)
set(COMPILER_MDK_ARMCC armcc)

set(TOOLCHAIN_XTENSA xtensa)
set(COMPILER_XTENSA xclang)

set(TOOLCHAIN_CODEWARRIOR codewarrior)
set(COMPILER_CODEWARRIOR mwcc56800e)

set(TOOLCHAIN_RISCV riscvllvm)
set(COMPILER_RISCV riscvllvm)

if(NOT DEFINED CONFIG_TOOLCHAIN)
    set(CONFIG_TOOLCHAIN ${TOOLCHAIN_ARMGCC})
    message(WARNING "No toolchain is designated, use armgcc by default.")
endif()

message("Build toolchain: ${CONFIG_TOOLCHAIN}")

include(${CMAKE_CURRENT_LIST_DIR}/mcux_config.cmake)

include("${CMAKE_CURRENT_LIST_DIR}/${CONFIG_TOOLCHAIN}.cmake")
# TOOLCHAIN_DIR is used in most pre/post command
set(TOOLCHAIN_DIR ${TOOLCHAIN_ROOT})

if (${CONFIG_TOOLCHAIN} STREQUAL ${TOOLCHAIN_ARMGCC})
    set(CONFIG_COMPILER ${COMPILER_ARMGCC})
elseif(${CONFIG_TOOLCHAIN} STREQUAL ${TOOLCHAIN_IAR})
    set(CONFIG_COMPILER ${COMPILER_IAR})
elseif(${CONFIG_TOOLCHAIN} STREQUAL ${TOOLCHAIN_MDK})
    if (NOT DEFINED CONFIG_COMPILER)
        set(CONFIG_COMPILER ${COMPILER_MDK_ARMCLANG})
    endif()
elseif(${CONFIG_TOOLCHAIN} STREQUAL ${TOOLCHAIN_XTENSA})
    set(CONFIG_COMPILER ${COMPILER_XTENSA})
elseif(${CONFIG_TOOLCHAIN} STREQUAL ${TOOLCHAIN_CODEWARRIOR})
    set(CONFIG_COMPILER ${COMPILER_CODEWARRIOR})
elseif(${CONFIG_TOOLCHAIN} STREQUAL ${TOOLCHAIN_RISCV})
    set(CONFIG_COMPILER ${COMPILER_RISCV})
endif()

if(DEFINED FPU_TYPE AND DEFINED FPU_ABI)
    set_floating_point(${FPU_TYPE} ${FPU_ABI})
endif()