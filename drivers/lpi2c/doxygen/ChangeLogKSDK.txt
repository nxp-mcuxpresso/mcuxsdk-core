/*!
@page driver_log Driver Change Log

@section lpi2c LPI2C
  The current LPI2C driver version is 2.5.7.

  - 2.5.7
    - Improvements
      - Added support for separated IRQ handlers.

  - 2.5.6
    - Improvements
      - Conditionally compile interrupt handling code to solve the problem of using this driver on CPU cores that do not support interrupts.

  - 2.5.5
    - Bug Fixes
      - Fixed LPI2C_SlaveInit() - allow to disable SDA/SCL glitch filter.

  - 2.5.4
    - Bug Fixes
      - Fixed LPI2C_MasterTransferBlocking() - the return value was sometime affected by call of LPI2C_MasterStop().

  - 2.5.3
    - Improvements
      - Added handler for LPI2C7 and LPI2C8.

  - 2.5.2
    - Bug Fixes
	    - Fixed ERR051119 to ignore the nak flag when IGNACK=1 in LPI2C_MasterCheckAndClearError.

  - 2.5.1
    - Bug Fixes
      - Added bus stop incase of bus stall in LPI2C_MasterTransferBlocking.
    - Improvements
      - Release peripheral from reset if necessary in init function.

  - 2.5.0
    - New Features
      - Added new function LPI2C_SlaveEnableAckStall to enable or disable ACKSTALL.

  - 2.4.1
    - Improvements
      - Before master transfer with transactional APIs, enable master function while disable slave function and
        vise versa for slave transfer to avoid the one affecting the other.

  - 2.4.0
    - Improvements
      - Split some functions, fixed CCM problem in file fsl_lpi2c.c.
    - Bug Fixes
      - Fixed bug in LPI2C_MasterInit that the MCFGR2's value set in LPI2C_MasterSetBaudRate may be overwritten by
        mistake.

  - 2.3.2
    - Improvements
      - Initialized the EDMA configuration structure in the LPI2C EDMA driver.

  - 2.3.1
    - Improvements
      - Updated LPI2C_GetCyclesForWidth to add the parameter of minimum cycle, because for master SDA/SCL filter, master
        bus idle/pin low timeout and slave SDA/SCL filter configuration, 0 means disabling the feature and cannot be used.
    - Bug Fixes
      - Fixed bug in LPI2C_SlaveTransferHandleIRQ that when restart detect event happens the transfer structure should
        not be cleared.
      - Fixed bug in LPI2C_RunTransferStateMachine, that when only slave address is transferred or there is still data
        remaining in tx FIFO the last byte's nack cannot be ignored.
      - Fixed bug in slave filter doze enable, that when FILTDZ is set it means disable rather than enable.
      - Fixed bug in the usage of LPI2C_GetCyclesForWidth. First its return value cannot be used directly to configure
        the slave FILTSDA, FILTSCL, DATAVD or CLKHOLD, because the real cycle width for them should be FILTSDA+3,
        FILTSCL+3, FILTSCL+DATAVD+3 and CLKHOLD+3. Second when cycle period is not affected by the prescaler value,
        prescaler value should be passed as 0 rather than 1.
      - Fixed wrong default setting for LPI2C slave. If enabling the slave tx SCL stall, then the default clock hold
        time should be set to 250ns according to I2C spec for 100kHz standard mode baudrate.
      - Fixed bug that before pushing command to the tx FIFO the FIFO occupation should be checked first in case FIFO
        overflow.

  - 2.3.0
    - New Features
      - Supported reading more than 256 bytes of data in one transfer as master.
      - Added API LPI2C_GetInstance.
    - Bug Fixes
      - Fixed bug in LPI2C_MasterTransferAbortEDMA, LPI2C_MasterTransferAbort and LPI2C_MasterTransferHandleIRQ that
        before sending stop signal whether master is active and whether stop signal has been sent should be checked, to
        make sure no FIFO error or bus error will be caused.
      - Fixed bug in LPI2C master EDMA transactional layer that the bus error cannot be caught and returned by user
        callback, by monitoring bus error events in interrupt handler.
      - Fixed bug in LPI2C_GetCyclesForWidth that the parameter used to calculate clock cycle should be 2^prescaler
        rather than prescaler.
      - Fixed bug in LPI2C_MasterInit that timeout value should be configured after baudrate, since the timeout
        calculation needs prescaler as parameter which is changed during baudrate configuration.
      - Fixed bug in LPI2C_MasterTransferHandleIRQ and LPI2C_RunTransferStateMachine that when master writes with no
        stop signal, need to first make sure no data remains in the tx FIFO before finishes the transfer.

  - 2.2.0
    - Bug Fixes
      - Fixed issue that the SCL high time, start hold time and stop setup time do not meet I2C specification, by
        changing the configuration of data valid delay, setup hold delay, clock high and low parameters.
      - MISRA C-2012 issue fixed.
        - Fixed rule 8.4, 13.5, 17.7, 20.8.

  - 2.1.12
    - Bug Fixes
      - Fixed MISRA advisory 15.5 issues.

  - 2.1.11
    - Bug Fixes
      - Fixed the bug that, during master non-blocking transfer, after the last byte is sent/received, the
        kLPI2C_MasterNackDetectFlag is expected, so master should not check and clear kLPI2C_MasterNackDetectFlag
        when remainingBytes is zero, in case FIFO is emptied when stop command has not been sent yet.
      - Fixed the bug that, during non-blocking transfer slave may nack master while master is busy filling tx FIFO,
        and NDF may not be handled properly.

  - 2.1.10
    - Bug Fixes
      - MISRA C-2012 issue fixed.
        - Fixed rule 10.3, 14.4, 15.5.
      - Fixed unaligned access issue in LPI2C_RunTransferStateMachine.
      - Fixed uninitialized variable issue in LPI2C_MasterTransferHandleIRQ.
      - Used linked TCD to disable tx and enable rx in read operation to fix the issue that for platform sharing the
        same DMA request with tx and rx, during LPI2C read operation if interrupt with higher priority happened exactly
        after command was sent and before tx disabled, potentially both tx and rx could trigger dma and cause trouble.
      - Fixed MISRA issues.
        - Fixed rules 10.1, 10.3, 10.4, 11.6, 11.9, 14.4, 17.7.
      - Fixed the waitTimes variable not re-assignment issue for each byte read.
    - New Features
      - Added the IRQHandler for LPI2C5 and LPI2C6 instances.
    - Improvements
      - Updated the LPI2C_WAIT_TIMEOUT macro to unified name I2C_RETRY_TIMES.

  - 2.1.9
    - Bug Fixes
      - Fixed Coverity issue of unchecked return value in I2C_RTOS_Transfer.
      - Fixed Coverity issue of operands did not affect the result in LPI2C_SlaveReceive and LPI2C_SlaveSend.
      - Removed STOP signal wait when NAK detected.
      - Cleared slave repeat start flag before transmission started in LPI2C_SlaveSend/LPI2C_SlaveReceive. The issue
        was that LPI2C_SlaveSend/LPI2C_SlaveReceive did not handle with the reserved repeat start flag. This caused the
        next slave to send a break, and the master was always in the receive data status, but could not receive data.

  - 2.1.8
    - Bug Fixes
      - Fixed the transfer issue with LPI2C_MasterTransferNonBlocking, kLPI2C_TransferNoStopFlag, with the wait
        transfer done through callback in a way of not doing a blocking transfer.
      - Fixed the issue that STOP signal did not appear in the bus when NAK event occurred.

  - 2.1.7
    - Bug Fixes
      - Cleared the stopflag before transmission started in LPI2C_SlaveSend/LPI2C_SlaveReceive. The issue was that
        LPI2C_SlaveSend/LPI2C_SlaveReceive did not handle with the reserved stop flag and caused the next slave to
        send a break, and the master always stayed in the receive data status but could not receive data.

  - 2.1.6
    - Bug Fixes
      - Fixed driver MISRA build error and C++ build error in LPI2C_MasterSend and LPI2C_SlaveSend.
      - Reset FIFO in LPI2C Master Transfer functions to avoid any byte still remaining in FIFO during last transfer.
      - Fixed the issue that LPI2C_MasterStop did not return the correct NAK status in the bus for second transfer to
        the non-existing slave address.

  - 2.1.5
    - Bug Fixes
      - Extended the Driver IRQ handler to support LPI2C4.
      - Changed to use ARRAY_SIZE(kLpi2cBases) instead of FEATURE COUNT to decide the array size for handle pointer
        array.

  - 2.1.4
    - Bug Fixes
      - Fixed the LPI2C_MasterTransferEDMA receive issue when LPI2C shared same request source with TX/RX DMA request.
        Previously, the API used scatter-gather method, which handled the command transfer first, then the linked TCD
        which was pre-set with the receive data transfer. The issue was that the TX DMA request and the RX DMA request
        were both enabled, so when the DMA finished the first command TCD transfer and handled the receive data TCD,
        the TX DMA request still happened due to empty TX FIFO. The result was that the RX DMA transfer would start
        without waiting on the expected RX DMA request.
      - Fixed the issue by enabling IntMajor interrupt for the command TCD and checking if there was a linked TCD to
        disable the TX DMA request in LPI2C_MasterEDMACallback API.

  - 2.1.3
    - Improvements
      - Added LPI2C_WATI_TIMEOUT macro to allow the user to specify the timeout times for waiting flags in functional
        API and blocking transfer API.
      - Added LPI2C_MasterTransferBlocking API.

  - 2.1.2
    - Bug Fixes
      - In LPI2C_SlaveTransferHandleIRQ, reset the slave status to idle when stop flag was detected.

  - 2.1.1
    - Bug Fixes
      - Disabled the auto-stop feature in eDMA driver. Previously, the auto-stop feature was
        enabled at transfer when transferring with stop flag. Since transfer was without stop flag and the auto-stop
        feature was enabled, when starting a new transfer with stop flag, the stop flag would be sent before the new
        transfer started, causing unsuccesful sending of the start flag, so the transfer could not start.
      - Changed default slave configuration with address stall false.

  - 2.1.0
    - Improvements
      - API name changed:
        - LPI2C_MasterTransferCreateHandle -> LPI2C_MasterCreateHandle.
        - LPI2C_MasterTransferGetCount -> LPI2C_MasterGetTransferCount.
        - LPI2C_MasterTransferAbort -> LPI2C_MasterAbortTransfer.
        - LPI2C_MasterTransferHandleIRQ -> LPI2C_MasterHandleInterrupt.
        - LPI2C_SlaveTransferCreateHandle -> LPI2C_SlaveCreateHandle.
        - LPI2C_SlaveTransferGetCount -> LPI2C_SlaveGetTransferCount.
        - LPI2C_SlaveTransferAbort -> LPI2C_SlaveAbortTransfer.
        - LPI2C_SlaveTransferHandleIRQ -> LPI2C_SlaveHandleInterrupt.

  - 2.0.0
    - Initial version.

@if dox_section_lpi2c_edma_driver

@section lpi2c_edma LPI2C_EDMA
  The current LPI2C_EDMA driver version is 2.4.2.

  - 2.4.2
    - Improvements
      - Add EDMA ext API to accommodate more types of EDMA.

  - 2.4.1
    - Refer LPI2C driver change log 2.0.0 to 2.4.1

@endif

*/
