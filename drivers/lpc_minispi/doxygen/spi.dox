/*!
@page drv_err Driver errors status
 - #kStatus_SPI_Busy = 7600
 - #kStatus_SPI_Idle = 7601
 - #kStatus_SPI_Error = 7602
 - #kStatus_SPI_BaudrateNotSupport = 7603
*/

/*!
@defgroup spi SPI: Serial Peripheral Interface Driver
@details

SPI driver includes functional APIs and transactional APIs.

Functional APIs are feature/property target low-level APIs.
Functional APIs can be used for SPI initialization/configuration/operation for the purpose of 
optimization/customization. Using the functional API requires the
knowledge of the SPI peripheral and how to organize functional APIs to
meet the application requirements. All functional API use the peripheral base
address as the first parameter. SPI functional operation groups provide the
functional API set.

Transactional APIs are transaction target high level APIs.
Transactional APIs can be used to enable the peripheral and in the
application if the code size and performance of transactional APIs satisfy the
requirements. If the code size and performance are a critical requirement,
see the transactional API implementation and write a custom code. All
transactional APIs use the spi_handle_t as the first parameter.
Initialize the handle by calling the SPI_MasterTransferCreateHandle() or SPI_SlaveTransferCreateHandle() API.

Transactional APIs support asynchronous transfer. This means that the functions
SPI_MasterTransferNonBlocking() and SPI_SlaveTransferNonBlocking() set up the interrupt for data
transfer. When the transfer completes, the upper layer is notified through a callback
function with the kStatus_SPI_Idle status.

# Typical use case {#SPICase}

## SPI master transfer using an interrupt method {#SPICaseInterrupt}

Refer to the driver examples codes located at \<SDK_ROOT\>/boards/\<BOARD\>/driver_examples/spi
*/

/*!
@defgroup spi_driver SPI Driver
@ingroup spi
@details This section describes the programming interface of the SPI driver.
*/


