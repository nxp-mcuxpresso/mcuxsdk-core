

/*!
@defgroup sai SAI: Serial Audio Interface
@details The MCUXpresso SDK provides a peripheral driver for the Serial Audio Interface (SAI)
         module of MCUXpresso SDK devices.


SAI driver includes functional APIs and transactional APIs.

Functional APIs target low-level APIs.
Functional APIs can be used for SAI initialization, configuration and operation, and
for optimization and customization purposes. Using the functional API requires the
knowledge of the SAI peripheral and how to organize functional APIs to
meet the application requirements. All functional API use the peripheral base
address as the first parameter. SAI functional operation groups provide the
functional API set.

Transactional APIs target high-level APIs.
Transactional APIs can be used to enable the peripheral and in the
application if the code size and performance of transactional APIs satisfy the
requirements. If the code size and performance are a critical requirement,
see the transactional API implementation and write a custom code. All
transactional APIs use the sai_handle_t as the first parameter.
Initialize the handle by calling the SAI_TransferTxCreateHandle() or SAI_TransferRxCreateHandle() API.

Transactional APIs support asynchronous transfer. This means that the functions
SAI_TransferSendNonBlocking() and SAI_TransferReceiveNonBlocking() set up the interrupt for data
transfer. When the transfer completes, the upper layer is notified through a callback
function with the kStatus_SAI_TxIdle and kStatus_SAI_RxIdle status.

# Typical configurations{#SAIConfigurations}
## Bit width configuration
SAI driver support 8/16/24/32bits stereo/mono raw audio data transfer.
SAI EDMA driver support 8/16/32bits stereo/mono raw audio data transfer, since the EDMA doesn't support 24bit data width, so application should pre-convert the 24bit data to 32bit.
SAI DMA driver support 8/16/32bits stereo/mono raw audio data transfer, since the EDMA doesn't support 24bit data width, so application should pre-convert the 24bit data to 32bit.
SAI SDMA driver support 8/16/24/32bits stereo/mono raw audio data transfer.
## Frame configuration
SAI driver support I2S, DSP, Left justified, Right justified, TDM mode.
Application can call the api directly:
SAI_GetClassicI2SConfig
SAI_GetLeftJustifiedConfig
SAI_GetRightJustifiedConfig
SAI_GetTDMConfig
SAI_GetDSPConfig

# Typical use case {#SAICase}

## SAI Send/receive using an interrupt method {#SAICaseInterrupt}

Refer to the driver examples codes located at \<SDK_ROOT\>/boards/\<BOARD\>/driver_examples/sai
## SAI Send/receive using a DMA method {#SAICaseDma}

Refer to the driver examples codes located at \<SDK_ROOT\>/boards/\<BOARD\>/driver_examples/sai

*/

/*!
@defgroup sai_driver SAI Driver
@ingroup sai
*/

/*!
@if dox_section_sai_dma
@defgroup sai_dma SAI DMA Driver
@endif
*/

/*!
@if dox_section_sai_edma
@defgroup sai_edma SAI EDMA Driver
@endif
*/

/*!
@if dox_section_sai_sdma
@defgroup sai_sdma SAI SDMA Driver

# Typical use case {#SAICase}

## Multi fifo transfer use sai sdma driver
The SDMA multi fifo script support transfer data between multi peripheral fifos and memory, a typical user case is that receiving multi sai channel data and put it into memory as
------------------------------------------------------------------------------
| channel 0  | channel 1  | channel 2  | channel 3  | channel 4  | .........  |
-------------------------------------------------------------------------------
Multi fifo script is target to implement above feature, it can supports
1.configurable fifo watermark range from 1~(2^12-1), it is a value of fifo_watermark * channel_numbers
2.configurable fifo numbers, support up to 15 continuous fifos
3.configurable fifo address offset, support address offset up to 64
@code
/* load sdma script */
SDMA_LoadScript()
/* sai multi channel configurations */
SAI_GetClassicI2SConfig(&config, DEMO_AUDIO_BIT_WIDTH, kSAI_Stereo, kSAI_Channel0Mask | kSAI_Channel1Mask | kSAI_Channel2Mask| kSAI_Channel3Mask | kSAI_Channel4Mask);
SAI_TransferRxSetConfigSDMA(SAI, handle, &config);
SAI_TransferReceiveSDMA(SAI, handle, &config);
@endcode

Transmitting data using multi fifo is same as above.
@endif
*/
