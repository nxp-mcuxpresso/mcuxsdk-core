/*!
@page driver_log Driver Change Log

@section i3c I3C
  The current I3C driver version is 2.13.0.

  - 2.13.0
    - New features
      - Added the hot-join support for I3C bus initialization API.
    - Bug Fixes
      - Set read termination with START at the same time in case unknown issue.
      - Set MCTRL[TYPE] as 0 for DDR force exit.
    - Improvements
      - Added the API to reset device count assigned by ENTDAA.
      - Provided the method to set global macro I3C_MAX_DEVCNT to determine how many device addresses ENTDAA can allocate at one time.
      - Initialized target management static array based on instance number for the case that multiple instances are used at the same time.

  - 2.12.0
    - Improvements
      - Added the slow clock parameter for Controller initialization function to calculate accurate timeout.
    - Bug Fixes
      - Fixed the issue that BAMATCH field can't be 0. BAMATCH should be 1 for 1MHz slow clock.

  - 2.11.1
    - Bug Fixes
      - Fixed the issue that interrupt API transmits extra byte when subaddress and data size are null.
      - Fixed the slow clock calculation issue.

  - 2.11.0
    - New features
      - Added the START/ReSTART SCL delay setting for the Soc which supports this feature.
    - Bug Fixes
      - Fixed the issue that ENTDAA process waits Rx pending flag which causes problem when Rx watermark isn't 0. Just check the Rx FIFO count.

  - 2.10.8
    - Improvements
      - Support more instances.

  - 2.10.7
    - Improvements
      - Fixed the potential compile warning.

  - 2.10.6
    - New features
      - Added the I3C private read/write with 0x7E address as start.

  - 2.10.5
    - New features
      - Added I3C HDR-DDR transfer support.

  - 2.10.4
    - Improvements
      - Added one more option for master to not set RDTERM when doing I3C Common Command Code transfer.

  - 2.10.3
    - Improvements
      - Masked the slave IBI/MR/HJ request functions with feature macro.

  - 2.10.2
    - Bug Fixes
      - Added workaround for errata ERR051617: I3C working with I2C mode creates the unintended Repeated START before actual STOP on some platforms.

  - 2.10.1
    - Bug Fixes
      - Fixed the issue that DAA function doesn't wait until all Rx data is read out from FIFO after master control done flag is set.
      - Fixed the issue that DAA function could return directly although the disabled interrupts are not enabled back.

  - 2.10.0
    - New features
      - Added I3C extended IBI data support.

  - 2.9.0
    - Improvements
      - Added adaptive termination for master blocking transfer. Set termination with start signal when receiving bytes less than 256.

  - 2.8.2
    - Improvements
      - Fixed the build warning due to armgcc strict check.

  - 2.8.1
    - Bug Fixes
      - Fixed violations of the MISRA C-2012 rules 17.7.

  - 2.8.0
    - Improvements
      - Added API I3C_MasterProcessDAASpecifiedBaudrate for temporary baud rate adjustment when I3C master assigns dynamic address.

  - 2.7.1
    - Bug Fixes
      - Fixed the issue that I3C slave handle STOP event before finishing data transmission.

  - 2.7.0
      - Fixed the CCM problem in file fsl_i3c.c.
      - Fixed the FSL_FEATURE_I3C_HAS_NO_SCONFIG_IDRAND usage issue in I3C_GetDefaultConfig and I3C_Init.

  - 2.6.0
      - Fixed the FSL_FEATURE_I3C_HAS_NO_SCONFIG_IDRAND usage issue in fsl_i3c.h.
      - Changed some static functions in fsl_i3c.c as non-static and define the functions in fsl_i3c.h to make I3C DMA driver reuse:
        - I3C_GetIBIType
        - I3C_GetIBIAddress
        - I3C_SlaveCheckAndClearError
      - Changed the handle pointer parameter in IRQ related funtions to void * type to make it reuse in I3C DMA driver.
      - Added new API I3C_SlaveRequestIBIWithSingleData for slave to request single data byte, this API could be used regardless slave is working in non-blocking interrupt or non-blocking dma.
      - Added new API I3C_MasterGetDeviceListAfterDAA for master application to get the device information list built up in DAA process.

  - 2.5.4
      - Improved I3C driver to avoid setting state twice in the SendCommandState of I3C_RunTransferStateMachine.
      - Fixed MISRA violation of rule 20.9.
      - Fixed the issue that I3C_MasterEmitRequest did not use Type I3C SDR.

  - 2.5.3
      - Updated driver for new feature FSL_FEATURE_I3C_HAS_NO_SCONFIG_BAMATCH and FSL_FEATURE_I3C_HAS_NO_SCONFIG_IDRAND.

  - 2.5.2
      - Updated driver for new feature FSL_FEATURE_I3C_HAS_NO_MERRWARN_TERM.
      - Fixed the issue that call to I3C_MasterTransferBlocking API did not generate STOP signal when NAK status was returned.

  - 2.5.1
      - Improved the receive terminate size setting for interrupt transfer read, now it's set at beginning of transfer if the receive size is less than 256 bytes.

  - 2.5.0
      - Added new API I3C_MasterRepeatedStartWithRxSize to send repeated start signal with receive terminate size specified.
      - Fixed the status used in I3C_RunTransferStateMachine, changed to use pending interrupts as status to be handled in the state machine.
      - Fixed MISRA 2012 violation of rule 10.3, 10.7.

  - 2.4.0
    - Bug Fixes
      - Fixed kI3C_SlaveMatchedFlag interrupt is not properly handled in I3C_SlaveTransferHandleIRQ when it comes together with interrupt kI3C_SlaveBusStartFlag.
      - Fixed the inaccurate I2C baudrate calculation in I3C_MasterSetBaudRate.
      - Added new API I3C_MasterGetIBIRules to get registered IBI rules.
      - Added new variable isReadTerm in struct _i3c_master_handle for
      transfer state routine to check if MCTRL.RDTERM is configured for read
      transfer.
      - Changed to emit Auto IBI in transfer state routine for slave start flag
      assertion.
      - Fixed the slave maxWriteLength and maxReadLength does not be configured
      into SMAXLIMITS register issue.
      - Fixed incorrect state for IBI in I3C master interrupt transfer IRQ handle routine.
      - Added isHotJoin in i3c_slave_config_t to request hot-join event during slave init.

  - 2.3.2
    - Bug Fixes
      - Fixed violations of the MISRA C-2012 rules 8.4, 17.7.
      - Fixed incorrect HotJoin event index in I3C_GetIBIType.

  - 2.3.1
    - Bug Fixes
      - Fixed the issue that call of I3C_MasterTransferBlocking/I3C_MasterTransferNonBlocking fails for the case which receive length 1 byte of data.
      - Fixed the issue that STOP signal is not sent when NAK status is detected during execution of I3C_MasterTransferBlocking function.

  - 2.3.0
    - Improvements
      - Added I3C common driver APIs to initialize I3C with both master and slave configuration.
      - Updated I3C master transfer callback to function set structure to include callback invoke
      for IBI event and slave2master event.
      - Updated I3C master non-blocking transfer model and always enable the interrupts to be able
      to re-act to the slave start event and handle slave IBI.

  - 2.2.0
    - Bug Fixes
      - Fixed the issue that I3C transfer size limit to 255 bytes.

  - 2.1.2
    - Bug Fixes
      - Reset default hkeep value to kI3C_MasterHighKeeperNone in I3C_MasterGetDefaultConfig

  - 2.1.1
    - Bug Fixes
      - Fixed incorrect FIFO reset operation in I3C Master Transfer APIs.
      - Fixed i3c slave IRQ handler issue, slave transmit could be underrun because tx FIFO is not filled in time right after start flag detected.

  - 2.1.0
    - Added definitions and APIs for I3C slave functionality, updated previous I3C APIs to support I3C functionality.

  - 2.0.0
    - Initial version.

*/

/*!
@page driver_log Driver Change Log

@section i3c_dma I3C_DMA
  The current I3C DMA driver version is 2.1.7.

  - 2.1.7
    - Bug Fixes
      - Fixed the issue to use subaddress to read/write data with RT500/600 DMA.

  - 2.1.6
    - Improvements
      - Added the FSL_FEATURE_I3C_HAS_NO_MASTER_DMA_WDATA_REG to select the correct register to write data based on specific Soc.

  - 2.1.5
    - New features
      - Supported I3C HDR-DDR transfer with DMA.
    - Improvements
      - Added workaround for RT500/600 I3C DMA transfer.
      - Removed I3C IRQ handler calling in the Tx EDMA callback. Previously driver doesn't use the END byte which can trigger the complete
        interrupt for controller sending and receiving, now let I3C event handler deal with I3C events.
      - Used linked DMA to transfer all I3C subaddress and data without handling of intermediate states, simplifying code logic.
      - Prepare the Tx DMA before I3C START to ensure there's no time delay between START and transmitting data.

  - 2.1.4
    - Improvements
      - Used linked DMA transfer to reduce the latency between DMA transfers previous data and the END byte.

  - 2.1.3
    - Bug Fixes
      - Fixed the MISRA issue rule 10.4, 11.3.

  - 2.1.2
    - Bug Fixes
      - Fixed the issue that I3C slave send the last byte data without using the END type register.

  - 2.1.1
    - Bug Fixes
      - Fixed MISRA issue rule 9.1.

  - 2.1.0
    - Improvements
      - Deleted legacy IBI data request code.

  - 2.0.1
    - Bug Fixes
      - Fixed issue that bus STOP occurs when Tx FIFO still takes data.
    - Improvements
      - Fixed the build warning due to armgcc strict check.

  - 2.0.0
    - Initial version.

*/

/*!
@page driver_log Driver Change Log

@section i3c_edma I3C_EDMA
  The current I3C EDMA driver version is 2.2.9.

  - 2.2.9
    - Bug Fixes
      - Fixed MISRA issue rule 11.3.
      - Added the master control done flag waiting code after STOP in case the bus is not idle when transfer function finishes.

  - 2.2.8
    - Improvements
      - Removed I3C IRQ handler calling in the EDMA callback. Previously driver doesn't use the END byte which can trigger the STOP
        interrupt for controller sending and receiving, now let I3C event handler deal with all I3C events.
    - Bug Fixes
      - Fixed the bug that the END type Tx register is not used when command length or data length is one byte.

  - 2.2.7
    - Bug Fixes
      - Fixed MISRA issue rule 11.6.

  - 2.2.6
    - New features
      - Added the I3C private read/write with 0x7E address as start.

  - 2.2.5
    - Improvements
      - Added the workaround for RT1180 I3C EDMA issue ERR052086.

  - 2.2.4
    - Bug Fixes
      - Fixed the issue that I3C master sends the last byte data without using the END type register.

  - 2.2.3
    - Bug Fixes
      - Fixed issue that slave polulates the last byte when Tx FIFO may be full.

  - 2.2.2
    - Bug Fixes
      - Fixed I3C MISRA issue rule 10.4, 11.3.

  - 2.2.1
    - Bug Fixes
      - Fixed the issue that I3C slave send the last byte data without using the END type register.
    - Improvements
      - There's no need to reserve two bytes FIFO for DMA transfer which is for IP issue workaround.

  - 2.2.0
    - Improvements
      - Deleted legacy IBI data request code.

  - 2.1.0
    - Bug Fixes
      - Fixed MISRA issue rule 8.4, 8.6, 11.8.

  - 2.0.1
    - Bug Fixes
      - Fixed MISRA issue rule 9.1.

  - 2.0.0
    - Initial version.

*/
